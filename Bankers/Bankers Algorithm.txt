AIM:-
Write a program to implement Bankers Algorithm


ALGORITHM:-
Step 1:- Enter no of resources.
Step 2:- Enter resources Instances.
Step 3:- Enter no of Process.
Step 4:- Enter no of resources initially allocated to each process.
Step 5:- Enter maximum no of resources required for each process to complete the execution.
Step 6:- Safety algorithm-
		The algorithm for finding out whether or not system is in a safe state can be described as follows:
		(1) Initialize: work = available
			Finish[i] = false;   for: = 1,2,......,n
		(2) if Need: <= work
			then
				work = work + Allocation;
			else
				exit
Step 7:- Resource request algorithm
		(1) if Request: <= Need:
				if Request: <= Available
			then
				Available = Available - Request
				Need: = Need: - Request
Step 8:- Print the safe sequence to the console.


PROGRAM:-
#include<stdio.h>
int np, nr, v[10], safe[10], ava[10], aval[10], re[10], f[10], i, j, flag, z, ind, Pid;
int m[10][10], need[10][10], all[10][10];
void resource()
{
	printf("\n Enter the number of resources: ");
	scanf("%d", & nr);
	printf("\n Enter the resource instances \n");
	for(i=0;i<nr;i++)
	scanf("%d", & re[i]);
}
void alloc()
{
	printf("\n Enter the number of process: ");
	scanf("%d", & np);
	for(i=0;i<np;i++)
	{
		f[i] = 0;
		for(j=0;j<nr;j++)
		{
			printf("\n Resource %d for %d", j+1, i+1);
			scanf("%d", & all[i][j]);
		}
	}
}
void maxreq()
{
	printf("\n Enter the max request for each process \n");
	for(i=0;i<np;i++)
	for(j=0;j<nr;j++)
	scanf("%d", & m[i][j]);
	printf("\n The available matrix \n");
	printf("........... \n");
	for(i=0;i<nr;i++)
	{
		z=0;
		for(j=0;j<np;j++)
		{
			z += all[j][i];
			ava[i] = re[i] - z;
			printf("%d \t", ava[i]);
			aval[i] = ava[i];
		}
	}
}
void needcal()
{
	printf("\n");
	printf("\n The need matrix \n");
	printf(" ..........\n");
	for(i=0;i<np;i++)
	{
		printf("\n");
		for(j=0;j<nr;j++)
		{
			need[i][j] = m[i][j] - all[i][j];
			printf("%d \t", need[i][j]);
		}
	}
	printf("\n \n");
}
void request()
{
	flag = 0;
	ind = 0;
	printf("\n Enter the requesting process id: ");
	scanf("%d", & Pid);
	printf("\n Enter the resource instance required \n");
	for(i=0;i<nr;i++)
	{
		scanf("%d", & re[i]);
		if(re[i] > m[Pid][i]);
		flag = 1;
	}
	if(flag == 0)
	{
		for(i=0;i<nr;i++)
		{
			need[Pid][i] = re[i];
		}
		for(i=0;i<np;i++)
		{
			printf("\n");
			for(j=0;j<nr;j++)
			{
				printf("%d \t", need[i][j]);
			}
		}
	}
	else
	{
		printf("\n Request exceeds maximum request \n");
	}
}
void out()
{
	printf("The safe sequence is \n");
	for(i=0;i<np;i++)
	{
		printf("P[%d] \t", safe[i]);
		printf("\n \n");
	}
}
void safety()
{
	flag=0, i=0, j=0, z=0, ind=0;
	while(1)
	{
		if(z++ > 2*np)
		{
			printf("\n Number of safe sequence");
		}
		for(j=0;j<nr;j++)
		{
			if(need[i][j] <= ava[j] && f[i] != 1)
			{
				flag=0;
			}
			else
			{
				flag = 1;
				break;
			}
		}
		if(flag == 0)
		{
			f[i] = 1;
			safe[ind] = i;
			for(j=0;j<nr;j++)
			ava[j] += all[i][j];
			ind++;
			if(ind >= np)
			return;
		}
		i++;
		if(i >= np)
		i=0;
	}
}
void main()
{
	resource();
	alloc();
	maxreq();
	needcal();
	safety();
	out();
	for(i=0;i<np;i++)
	{
		f[i] = 0;
		safe[i] = 0;
	}
	request();
	for(j=0;j<nr;j++)
	ava[j] = aval[j];
	safety();
	out();
}


OUTPUT:-
Enter the number of Resources: 3

Enter the resources instances
10
5
7

Enter the number of process: 5

Resources 1 for 1 0
Resources 2 for 1 1
Resources 3 for 1 0
Resources 1 for 2 2
Resources 2 for 2 0
Resources 3 for 2 0
Resources 1 for 3 3
Resources 2 for 3 0
Resources 3 for 3 2
Resources 1 for 4 2
Resources 2 for 4 1
Resources 3 for 4 1
Resources 1 for 5 0
Resources 2 for 5 0
Resources 3 for 5 2

Enter the max request for each process
7
5
3
3
2
2
9
0
2
2
2
2
4
3
3

The available Matrix
................

The Need Matrix
................
7	4	3
1	2	2
6	0	0
0	1	1
4	3	1

The Safe Sequence is
P[1]
P[3]
P[4]
P[0]
P[2]

Enter the requesting process id: 1

Enter the resource instance Required
1
0
2

Request exceed maximum request.

The safe sequence is
P[1]
P[3]
P[4]
P[0]
P[2]