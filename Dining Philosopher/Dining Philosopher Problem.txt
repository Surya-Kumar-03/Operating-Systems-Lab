AIM:-
Write a program to solve the Dining Philosopher Problem.


ALGORITHM:-
Step 1:- Initialize the state array S as 0, Si = 0 if the philosopher i is thinking or 1 if hungry.
Step 2:- Associate two functions getfork(i) and putfork(i) for each philosopher i.
Step 3:- For each philosopher 1 call getfork(i), test(i) and putfork(i) if i is 0.
Step 4:- Stop.


ALGORITHM for getfork(i):-
Step 1:- Set S[i] = 1  i.e  the philosopher i is hungry
Step 2:- Call test(i)


ALGORITHM for putfork(i):-
Step 1:- Set S[i] = 0  i.e  the philosopher i is thinking
Step 2:- test[LEFT] and test[RIGHT]


ALGORITHM for test(i):-
Step 1:- Check if ( state[i] == HUNGRY && state[LEFT] != EATING && state[RIGHT] != EATING)
Step 2:- Give the i philosopher a chance to eat.


PROGRAM:-
#include<stdio.h>
//  #include<conio.h>
#define LEFT (i+4)%5
#define RIGHT (i+1)%5
#define THINKING 0
#define HUNGRY 1
#define EATING 2
int state[5];
void put_forks(int);
void test(int);
void take_forks(int i);
void philosopher(int i)
{
	if(state[i] == 0)
	{
		take_forks(i);
		if(state[i] == EATING)
		printf("\n Eating in process.... ");
		put_forks(i);
	}
}
void put_forks(int i)
{
	state[i] = THINKING;
	printf("\n Philosopher %d completed its works", i);
	test(LEFT);
	test(RIGHT);
}
void take_forks(int i)
{
	state[i] = HUNGRY;
	test(i);
}
void test(int i)
{
	if(state[i] == HUNGRY && state[LEFT] != EATING && state[RIGHT] != EATING)
	{
		printf("\n Philosopher %d can eat", i);
		state[i] = EATING;
	}
}
void main()
{
	int i;
	//  clrscr();
	for(i=1;i<=5;i++)
	state[i] = 0;
	printf("\n\t\t\t Dining Philosopher Problem...... ");
	//  printf("\n\t\t ............. ");
	for(i=1;i<=5;i++)
	{
		printf("\n\n The Philosopher %d falls hungry \n", i);
		philosopher(i);
	}
	//  getch();
}


OUTPUT:-
Dining Philosopher Problem......

THe Philosopher 1 falls hungry

Philosopher 1 can eat
Eating in process....
Philosopher 1 completed its work.

The Philosopher 2 falls hungry

Philosopher 2 can eat
Eating in process....
Philosopher 2 completed its work.

THe Philosopher 3 falls hungry

Philosopher 3 can eat
Eating in process....
Philosopher 3 completed its work.

The Philosopher 4 falls hungry

Philosopher 4 can eat
Eating in process....
Philosopher 4 completed its work.

The Philosopher 5 falls hungry

Philosopher 5 can eat
Eating in process....
Philosopher 5 completed its work.